import java.math.BigInteger;
 

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ArrayList<Integer> arr1 = new ArrayList<>();
        ArrayList<Integer> arr2 = new ArrayList<>();
        ListNode curr1 = l1;
        ListNode curr2 = l2;
        while (curr1 != null) {
            arr1.add(curr1.val);
            curr1 = curr1.next;
        }
        while (curr2 != null) {
            arr2.add(curr2.val);
            curr2 = curr2.next;
        }
        Collections.reverse(arr1);
        Collections.reverse(arr2);
        StringBuilder sb1 = new StringBuilder();
        for (int num : arr1) {
            sb1.append(num);
        }
        String one = sb1.toString();
        StringBuilder sb2 = new StringBuilder();
        for (int num : arr2) {
            sb2.append(num);
        }
        String two = sb2.toString();
        BigInteger total = new BigInteger(one).add(new BigInteger(two));
        String totalString = total.toString();
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (char s : totalString.toCharArray()) {
            current.next = new ListNode(Character.getNumericValue(s));
            current = current.next;
        } 
        ListNode result = reverse(dummy.next);
        return result;
    }
    
    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
