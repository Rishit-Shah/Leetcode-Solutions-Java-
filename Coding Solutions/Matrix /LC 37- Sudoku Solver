class Solution {
    public void solveSudoku(char[][] board) {
        backtrack(board);
    }
    
    public boolean backtrack(char[][] board){
        for(int row=0; row<9;row++){
            for(int col=0; col<9;col++){
                if(board[row][col]=='.'){
                   for(char c='1';c<='9';c++){
                       if(isvalid(board, row, col, c)){
                           board[row][col]=c;
                           if(backtrack(board)){
                               return true;
                               
                           }
                           else {
                               board[row][col]='.';
                           }
                           
                       }
                       
                   }
                    return false;
                    
                }
                
            }
            
        }
        return true;
    }

    public boolean isvalid(char[][] board, int row, int col, char c){
        for(int i=0;i<9;i++){
            if(board[row][i]==c || board[i][col]==c) return false;
                
            

            int boxrow= 3 * (row/3) + i/3;
            int boxcol= 3 * (col/3) + i%3;

            if(board[boxrow][boxcol]==c) return false;                
            }
            return true;
          
    }

}
