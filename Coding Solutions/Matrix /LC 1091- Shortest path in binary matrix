class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n=grid.length;
        if (grid[0][0] == 1 || grid[n - 1][n - 1] == 1) return -1;
        Queue<int[]> q = new LinkedList<>();
        boolean[][] visited = new boolean[n][n];
        int finalsteps=1;
        int[][] directions={{-1, -1}, {-1, 0}, {-1, 1},
    { 0, -1},{ 0, 1},
    { 1, -1}, { 1, 0}, { 1, 1}};

     q.add(new int[]{0, 0});
     visited[0][0] = true;

     while(!q.isEmpty()){
        int size=q.size();
        for(int i=0;i<size;i++){
            int[] curr= q.poll();
            int row=curr[0], col=curr[1];

        if(row==n-1 && col==n-1) return finalsteps;

        for(int[] dirs: directions){
            int r= row +dirs[0], c=col+dirs[1];
 
               if(r>=0 && c>=0 && r<n && c<n &&
                grid[r][c]==0 && !visited[r][c]){

                    q.add(new int[]{r, c});
                    visited[r][c]=true;


            }

        } 


        }
        finalsteps++;

     }
    return -1;



        
    }
}
