class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        
        List<List<Integer>> res= new ArrayList<>();
        if(heights==null || heights.length==0)return res;

        int m =heights.length;
        int n=heights[0].length;

        boolean[][] pacific= new boolean[m][n];
        boolean[][] atlantic= new boolean[m][n];

        for(int i=0;i<m;i++){
            dfs(heights,pacific, i, 0, heights[i][0]); //left column
            dfs(heights, atlantic, i, n-1, heights[i][n-1]); //right column

        }

        for(int j=0;j<n;j++){
            dfs(heights, pacific, 0, j, heights[0][j]); // top row
            dfs(heights, atlantic, m-1,j, heights[m-1][j]); //bottom row

        }

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pacific[i][j] && atlantic[i][j]){
                    res.add(Arrays.asList(i, j));

                }

            }

        }
        return res;


    }

    public void dfs(int[][] heights, boolean[][] visited, int i, int j, int prevHeight){
        int m = heights.length;
        int n = heights[0].length;
 
        if (i < 0 || j < 0 || i >= m || j >= n || visited[i][j] || heights[i][j] < prevHeight) {
            return;
        }

        visited[i][j] = true;
 
        dfs(heights, visited, i + 1, j, heights[i][j]);
        dfs(heights, visited, i - 1, j, heights[i][j]);
        dfs(heights, visited, i, j + 1, heights[i][j]);
        dfs(heights, visited, i, j - 1, heights[i][j]);
    }
}
