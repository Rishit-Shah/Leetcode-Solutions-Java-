It is a DFS approach:

class Solution {
    public void solve(char[][] board) {
        int row=board.length;
        int col=board[0].length;

    // marking all left an right border 'O' as T;
        for(int i=0;i<row;i++){
            dfs(board, i, 0);
            dfs(board,i , col-1);
        }

     // marking all up and down border  '0' as T;

    for(int j=0;j<col;j++){
            dfs(board, 0, j);
            dfs(board,row-1, j);
        }

        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';

                }

            }

        }



        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='T'){
                    board[i][j]='O';

                }

            }

        }
        
    }
    public void dfs(char[][] board, int i, int j){
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]!='O'){
            return ;

        }
        board[i][j]='T';
        dfs(board, i-1, j);
        dfs(board, i+1, j);
        dfs(board, i, j-1);
        dfs(board, i, j+1);



    }
}
